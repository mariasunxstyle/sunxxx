# text_match_fixes.py
from aiogram import types

def normalize(text):
    return text.strip().replace("‚è≠Ô∏è", "‚è≠Ô∏è ").replace("üìã", "üìã ").replace("‚Ü©Ô∏è", "‚Ü©Ô∏è ").replace("‚õî", "‚õî ")

def match_button(text, target):
    return normalize(text) == normalize(target)

@dp.message_handler(lambda m: match_button(m.text, "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
async def skip_handler(message: types.Message):
    await increment_index(message.from_user.id)
    await process_position(message)

@dp.message_handler(lambda m: match_button(m.text, "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
async def back_to_steps(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥", reply_markup=steps_kb)

@dp.message_handler(lambda m: match_button(m.text, "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞"))
async def back_two_steps(message: types.Message):
    state = user_states.get(message.from_user.id)
    if not state:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞. –í—ã–±–µ—Ä–∏ —à–∞–≥ –∑–∞–Ω–æ–≤–æ.", reply_markup=steps_kb)
        return
    new_step = max(1, state["step"] - 2)
    await step_handler(types.Message(
        message_id=message.message_id,
        date=message.date,
        chat=message.chat,
        text=f"–®–∞–≥ {new_step}",
        from_user=message.from_user
    ))

@dp.message_handler(lambda m: match_button(m.text, "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
async def finish_handler(message: types.Message):
    await reset_state(message.from_user.id)
    await end_session(message)
