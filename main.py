import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import CommandStart
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
from steps import steps

load_dotenv()
API_TOKEN = os.getenv("TOKEN")
CHANNEL_ID = "@sunxstyle"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

def format_duration(mins):
    h, m = divmod(mins, 60)
    return f"{h}—á {m}–º" if h else f"{m}–º"

def get_step_buttons():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for step in steps:
        label = f"–®–∞–≥ {step['step']} ({format_duration(step['duration_min'])})"
        keyboard.insert(types.KeyboardButton(label))
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    return keyboard

def get_control_buttons():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")
    keyboard.add("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    keyboard.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞")
    keyboard.add("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
    return keyboard

@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
    if chat_member.status in ["left", "kicked"]:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)")
        await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª @sunxstyle", reply_markup=keyboard)
        return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è
"
        "–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.
"
        "–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.

"
        "–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞.
"
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.

"
        "–•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∂–º–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ. –¢–∞–º –≤—Å—ë –ø–æ –¥–µ–ª—É.",
        reply_markup=get_step_buttons()
    )

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def send_info(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è –ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–≥–∞—Ä—É.
"
        "–û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–∂–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å–æ–ª–Ω—Ü—É, —Å–Ω–∏–∂–∞—è —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –ø—è—Ç–µ–Ω.

"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ,
"
        "–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.
"
        "–¢–∞–∫ –∫–æ–∂–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–≤–æ—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É: –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–ª–∞–Ω–∏–Ω –∏ –≥–æ—Ä–º–æ–Ω—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.

"
        "–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî –Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.

"
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.
"
        "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫–æ–∂–∞ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–ª–∞—Å—å –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞–ª–∞ –∑–∞—â–∏—Ç—É.

"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director."
    )

@dp.message_handler(lambda message: message.text.startswith("–®–∞–≥"))
async def handle_step(message: types.Message):
    step_num = int(message.text.split()[1])
    step = next((s for s in steps if s["step"] == step_num), None)
    if step:
        await message.answer(f"–®–∞–≥ {step['step']} ‚Äî {step['duration_min']} –º–∏–Ω—É—Ç.
–°–ª–µ–¥–∏ –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ç–µ–ª–∞.
–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –Ω–∞—á–Ω–∏ —Å —à–∞–≥–∞ ‚Äú–º–∏–Ω—É—Å –¥–≤–∞‚Äù –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.")
        text = "
".join([f"{p['name']} ‚Äî {p['min']} –º–∏–Ω" for p in step["positions"]])
        await message.answer(text, reply_markup=get_control_buttons())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)