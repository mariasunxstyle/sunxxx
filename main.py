# sunxstyle_bot: –±–æ—Ç –¥–ª—è –∑–∞–≥–∞—Ä–∞ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
import asyncio
import os
from steps import steps
from subscription_check import is_user_subscribed, subscription_prompt
from handlers import end_session, end_session_kb

API_TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = "@sunxstyle"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞
start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("–°—Ç–∞—Ä—Ç ‚òÄÔ∏è"))

# –ö–Ω–æ–ø–∫–∏ —à–∞–≥–æ–≤
steps_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
for step in steps:
    label = f"–®–∞–≥ {step['step']}"
    steps_kb.insert(KeyboardButton(label))
steps_kb.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —à–∞–≥–∞
control_kb = ReplyKeyboardMarkup(resize_keyboard=True)
control_kb.row(KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
control_kb.row(KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
control_kb.row(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞"))
control_kb.row(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))

# –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞
done_kb = ReplyKeyboardMarkup(resize_keyboard=True)
done_kb.row(KeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"), KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"), KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞"), KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if not await is_user_subscribed(bot, message.from_user.id):
        await subscription_prompt(message)
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è\n–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n\n–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞.\n–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n\n–•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∂–º–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ.", reply_markup=steps_kb)

@dp.callback_query_handler(lambda c: c.data == 'check_subscription')
async def check_subscription(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_user_subscribed(bot, user_id):
        await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ‚òÄÔ∏è", reply_markup=steps_kb)
    else:
        await bot.send_message(user_id, "–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ —Å–Ω–æ–≤–∞.")

@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info_handler(message: types.Message):
    await message.answer("‚ÑπÔ∏è –ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–≥–∞—Ä—É.\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ.\n–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ, –Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.\n\n–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director")

@dp.message_handler(lambda m: m.text.startswith("–®–∞–≥ "))
async def step_handler(message: types.Message):
    if not await is_user_subscribed(bot, message.from_user.id):
        await subscription_prompt(message)
        return

    step_num = int(message.text.replace("–®–∞–≥ ", ""))
    step = next((s for s in steps if s['step'] == step_num), None)
    if not step:
        await message.answer("–®–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    for position, duration in step['positions']:
        await message.answer(f"{position} ‚Äî {duration} –º–∏–Ω", reply_markup=control_kb)
        await asyncio.sleep(duration * 60)
    await message.answer("–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. ‚òÄÔ∏è\n–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è.", reply_markup=done_kb)

@dp.message_handler(lambda m: m.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish_handler(message: types.Message):
    await end_session(message)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
