import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from steps import steps

API_TOKEN = "7856116405:AAFWDJM4yfMydjmnI7m-iYnTdEEbcnq9d9Y"
CHANNEL_ID = "@sunxstyle"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

user_state = {}

def get_step_buttons():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for step in steps:
        minutes = int(step['duration_min']) if step['duration_min'].is_integer() else step['duration_min']
        total = step['duration_min']
        if total >= 60:
            hours = int(total // 60)
            mins = int(total % 60)
            time_str = f"{hours} —á {mins} –º" if mins else f"{hours} —á"
        else:
            time_str = f"{int(total)} –º" if total.is_integer() else f"{total} –º"
        label = f"–®–∞–≥ {step['step']} ({time_str})"
        keyboard.insert(types.KeyboardButton(label))
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    return keyboard

def get_control_buttons():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")
    keyboard.add("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    keyboard.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞")
    keyboard.add("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è –¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏. "
        "–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤. "
        "–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞. "
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥. "
        "–•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∂–º–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ. –¢–∞–º –≤—Å—ë –ø–æ –¥–µ–ª—É.",
        reply_markup=get_step_buttons()
    )

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def send_info(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è –ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–≥–∞—Ä—É. "
        "–û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–∂–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å–æ–ª–Ω—Ü—É, —Å–Ω–∏–∂–∞—è —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –ø—è—Ç–µ–Ω. "
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ, "
        "–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF. "
        "–¢–∞–∫ –∫–æ–∂–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–≤–æ—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É: –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–ª–∞–Ω–∏–Ω –∏ –≥–æ—Ä–º–æ–Ω—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏. "
        "–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî –Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF. "
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥. "
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director."
    )

async def run_step_positions(message, step_data):
    user_id = message.from_user.id
    user_state[user_id] = {
        "cancel": False,
        "position_index": 0,
        "step": step_data,
        "task": None,
    }

    await message.answer(
        f"–®–∞–≥ {step_data['step']} ‚Äî {step_data['duration_min']} –º–∏–Ω—É—Ç.\n"

    async def timer():
        for i, pos in enumerate(step_data["positions"]):
            if user_state[user_id]["cancel"]:
                return
            user_state[user_id]["position_index"] = i
            minutes = int(pos['min']) if pos['min'].is_integer() else pos['min']
            await message.answer(f"{pos['name']} ‚Äî {minutes} –º–∏–Ω", reply_markup=get_control_buttons())
            await asyncio.sleep(pos["min"] * 60)
        await message.answer("–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! ‚òÄÔ∏è", reply_markup=get_step_buttons())

    task = asyncio.create_task(timer())
    user_state[user_id]["task"] = task

@dp.message_handler(lambda message: message.text.startswith("–®–∞–≥"))
async def handle_step(message: types.Message):
    step_num = int(message.text.split()[1])
    step = next((s for s in steps if s["step"] == step_num), None)
    if step:
        await run_step_positions(message, step)

@dp.message_handler(lambda message: message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")
async def skip_position(message: types.Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)
    if not state:
        return
    state["cancel"] = True
    step_data = state["step"]
    next_index = state["position_index"] + 1
    if next_index >= len(step_data["positions"]):
        await message.answer("–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! ‚òÄÔ∏è", reply_markup=get_step_buttons())
        return
    await run_step_positions(message, {
        "step": step_data["step"],
        "duration_min": sum(p["min"] for p in step_data["positions"][next_index:]),
        "positions": step_data["positions"][next_index:]
    })

@dp.message_handler(lambda message: message.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def stop_session(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_state:
        user_state[user_id]["cancel"] = True
        user_state.pop(user_id)
    await message.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=get_step_buttons())

@dp.message_handler(lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞")
async def go_back(message: types.Message):
    await message.answer("–í–µ—Ä–Ω–∏—Å—å –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥ ‚Äî –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —à–∞–≥ –≤—Ä—É—á–Ω—É—é", reply_markup=get_step_buttons())

@dp.message_handler(lambda message: message.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
async def return_to_steps(message: types.Message):
    await message.answer("–í—ã–±–∏—Ä–∞–π —à–∞–≥:", reply_markup=get_step_buttons())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)